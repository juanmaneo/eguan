#!/bin/bash

VOLD_DIR_ABS="$1"
REST_PATH="$2"
OWNER_ID="$3"
NAME=eguan
LAUNCH_DIR=`dirname $0`

remove_peers_config()
{
    # save vold.cfg and remove peers
    sudo -u $NAME cp $VOLD_DIR_ABS/vold.cfg $VOLD_DIR_ABS/vold.cfg.temp
    sudo -u $NAME sed -i '/io.eguan.vold.peers/d' $VOLD_DIR_ABS/vold.cfg
}

add_peers_config()
{
    sudo -u $NAME cp $VOLD_DIR_ABS/vold.cfg.temp $VOLD_DIR_ABS/vold.cfg
    sudo -u $NAME rm $VOLD_DIR_ABS/vold.cfg.temp
}

check_rest_server()
{
    TEMPFILE=`mktemp`
    # try during max 60s to connect to the rest server
    i=0
    CONNECT_OK=0
    while [ $i -lt 10 ] ; do
        echo "Trying to connect to the REST server ..."
        sleep 6
        curl -s -D $TEMPFILE $REST_PATH/vvrs?ownerId=$OWNER_ID > /dev/null
        grep "200 OK" $TEMPFILE > /dev/null

        if [ $? -eq 0 ]; then
            echo "Server REST started"; CONNECT_OK=1
            break 
        fi
    
        let i=i+1 
    done
    rm $TEMPFILE
    
    if [ $CONNECT_OK -eq 0 ]; then
        echo "Rest server not started"
        sudo /etc/init.d/$NAME stop
        add_peers_config
        exit 1
    fi
}

do_trap()
{
    echo "First Node installation aborted"
   	if [ -e $TEMPFILE ]; then
    	rm $TEMPFILE
    fi
    sudo /etc/init.d/$NAME stop
    add_peers_config
    exit 2
}

trap do_trap SIGINT SIGTERM

# Modify the config to remove all peers
remove_peers_config

# Start a eguan daemon
sudo /etc/init.d/$NAME start

# Check if the REST server is up 
check_rest_server

#create vvr
export PYTHONPATH="$OS_PREFIX/lib/python2.7/site-packages/"
$OS_PREFIX/bin/init-vvr "$REST_PATH" "$OWNER_ID"

# Stop the eguan daemon
sudo /etc/init.d/$NAME stop

# Remove the temporary configuration and set the older
add_peers_config
